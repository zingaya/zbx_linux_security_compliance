- name: Check for pending updates
  hosts: all
  gather_facts: yes
  become: {{ become_param }} 
  vars:
    upgrade: "{{ upgrade_param }}"
    lock_action: "{{ lock_param }}"
    packages_to_handle: {{ packages_param }}
  tasks:
    - name: Yum block
      block:
        - name: Ensure yum-plugin-versionlock is installed
          yum:
            name: yum-plugin-versionlock
            state: present

        - name: Lock packages using yum-versionlock
          community.general.yum_versionlock:
            name: "{{ item }}"
            state: present
          loop: "{{ packages_to_handle }}"
          register: lock_result
          when: lock_action == "lock"

        - name: Unlock packages using yum-versionlock
          community.general.yum_versionlock:
            name: "{{ item }}"
            state: absent
          loop: "{{ packages_to_handle }}"
          register: unlock_result
          when: lock_action == "unlock"

        - name: Get list of locked packages
          shell: yum versionlock
          register: lock_packages
          changed_when: false

        - name: Parse yum locked packages
          set_fact:
            locked: "{{ lock_packages.stdout_lines | select('match', '^(0:([^0-9-]+)|^([^:]+)-0:).*') | map('regex_replace', '^(0:([^0-9-]+)|^([^:]+)-0:).*', '{\"name\": \"\\2\\3\"}') | map('from_json') | list | unique }}"
          changed_when: false

        - name: Check updates using yum and upgrade
          yum:
            name: "*"
            state: latest
          register: upgrade_result
          when: upgrade == "yes"

        - name: Check updates using yum
          yum:
            list: updates
          register: yum_updates
          changed_when: false

        - name: Parse yum updates pending
          set_fact:
            updates: "{{ yum_updates.results | list }}"

      rescue:
        - name: Log error
          set_fact:
            updates: >-
              {% if lock_action == "lock" %}
              Error: {{ lock_result.results | selectattr('failed') | map(attribute='msg') | to_json }}
              {% elif lock_action == "unlock" %}
              Error: {{ unlock_result.results | selectattr('failed') | map(attribute='msg') | to_json }}
              {% elif upgrade == "yes" and upgrade_result is failed %}
              Error: {{ upgrade_result.msg }}
              {% elif lock_packages is failed %}
              Error: {{ lock_packages.stderr }}
              {% elif yum_updates.rc != 0 %}
              Error: {{ yum_updates.stderr }}
              {% else %}
              Error: Unknown
              {% endif %}
      when: ansible_facts['distribution'] in ["RedHat", "AlmaLinux", "CentOS"]

    - name: Apt block
      block:
        - name: Lock packages using apt-mark hold
          command: apt-mark hold "{{ item }}"
          loop: "{{ packages_to_handle }}"
          register: lock_result
          when: lock_action == "lock"

        - name: Unlock packages using apt-mark unhold
          command: apt-mark unhold "{{ item }}"
          loop: "{{ packages_to_handle }}"
          register: unlock_result
          when: lock_action == "unlock"

        - name: Check updates using apt (Upgrade {{ upgrade_param }})
          apt:
            update_cache: yes
            upgrade: "{{ upgrade_param }}"
          register: upgrade_result
          changed_when: false

        - name: List packages using apt
          shell: apt list --upgradeable | grep -E '^[a-zA-Z0-9.-]+/' | awk -F/ '{print $1}'
          register: apt_updates
          changed_when: false

        - name: Get list of holded packages
          shell: apt-mark showhold
          register: lock_packages
          changed_when: false

        - name: Parse apt locked packages
          set_fact:
            locked: "{{ lock_packages.stdout_lines | map('regex_replace', '^(.*)$', '{\"name\": \"\\1\"}') | map('from_json') | list }}"
          changed_when: false

        - name: Parse apt updates
          set_fact:
            updates: "{{ apt_updates.stdout_lines | map('regex_replace', '^(.*)$', '{ \"name\": \"\\1\" }') | map('from_json') | list }}"

      rescue:
        - name: Log error
          set_fact:
            updates: >-
              {% if lock_action == "lock" %}
              Error: {{ lock_result.results | selectattr('failed') | map(attribute='stderr') | to_json }}
              {% elif lock_action == "unlock" %}
              Error: {{ unlock_result.results | selectattr('failed') | map(attribute='stderr') | to_json }}
              {% elif upgrade == "yes" and upgrade_result is failed %}
              Error: {{ upgrade_result.msg }}
              {% elif apt_updates.rc != 0 %}
              Error: {{ apt_updates.stderr }}
              {% elif lock_packages.rc != 0 %}
              Error: {{ lock_packages.stderr }}
              {% else %}
              Error: Unknown
              {% endif %}
      when: ansible_facts['distribution'] in ["Ubuntu", "Debian"]

    - name: Get hostname block
      block:
        - name: Get hostname from Zabbix Agent
          shell: (zabbix_agent2 -t agent.hostname || zabbix_agent -t agent.hostname || zabbix_agentd -t agent.hostname) | grep hostname
          register: cmd_output
          changed_when: false

        - name: Set hostname variable
          set_fact:
            hostname: "{{ cmd_output.stdout }}"

      rescue:
        - name: Get hostname from Linux
          command: cat /etc/hostname
          register: cmd_output
          ignore_errors: true
          changed_when: false

        - name: Set hostname variable
          set_fact:
            hostname: "{{ cmd_output.stdout }}"

    - name: Generate filename from hostname
      set_fact:
        filename: "{{ hostname | regex_replace('.*\\|(.+?)\\]', '\\1') }}.json"
      delegate_to: localhost

    - name: Write updates to JSON file
      lineinfile:
        path: /tmp/updates/{{ filename }}
        line: "{{ {'hostname': hostname, 'current_date': now(utc=true), 'updates': updates, 'locked_packages': locked, 'distro': ansible_facts['distribution'], 'distro_ver': ansible_facts['distribution_version'], 'kernel': ansible_facts['kernel'], 'ipv4_addresses': ansible_facts['all_ipv4_addresses'], 'ipv6_addresses': ansible_facts['all_ipv6_addresses']} | to_json }}"
        create: yes
        mode: '0644'
      delegate_to: localhost
