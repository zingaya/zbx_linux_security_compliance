2.0
Major changes:
- Code was refactored.
- Nows this script consist in mainly 3 phases. 
	- 1st an execution of a single Ansible command to get facts (and reduced modules).
	- 2nd Contructs playbook for each pkgmanager detected on previous phase and allowed via variable/argument and executes them (and only on the reachable hosts, again filtered on 1st phase) on parallel (as a try to speedup execution and avoid bottlenecks to wait until all YUM pkg ended before proceeding to APT, and so on).
	- 3rd after Ansible executions, recompile all results and send them to Zabbix.
- YAML-based playbook fully dynamic generation directly from Python using PyYAML, removing tasks that are not enterely needed (e.g., only APT manager is used) and allowing to easily add/replace tasks. As a result, the ``linux_security_compliance.yaml`` file has been removed.
- Reworked command-line arguments to provide more intuitive and flexible options. Ensure to check README. Can now override configuration values via command-line arguments (e.g., Zabbix server, inventory file, package managers allowed, etc.).
- Introduced more flexibility for choosing the package manager and for selecting which packages to lock/unlock (at the same time).
- Added verbose and simplified output if silent.
- Reworked logging to the Zabbix host.
- Optional ability to read from Zabbix API, and generate a temporary Ansible inventory file, using same host groups that are on Zabbix. A valid Zabbix API Token is needed.
  - It will get the first available interface IP, or DNS (if set). **Important**: It will discard any host with no interfaces, or if it only interface is "127.0.0.1".
  - Host groups and host names with space will be replaced with an underscore "_".

Minor changes:
- Renamed ZABBIX_DEF_HOSTNAME to ZABBIX_HOST.
- Removed ZABBIX_PORT. As now ZABBIX_SERVER is able to be set as array for cluster nodes (e.g., ['zabbix-node-1:10051', 'zabbix-node-2', 'zabbix-node-3:10055'])
- Added a check to prevent running the script more than once by verifying the existence of ".lock" file in the temporary path.
- Added debug flag to check YAML, data sent to Zabbix and other variables values.
- Now removes all temporary files when the script completes successfully.
- Added more distros by default to each package manager.
- Added user login as default variable or via argument.
- Arguments/variables validation for ZABBIX_SERVER and PKG_MGR (e.g. ['str1', 'str2']). Now accepts "str1, str2" or "str1 str2" and will try to correct.
- Added SELinux item and trigger to Zabbix template
- Changed JSonPATH preprocessing (to match modified Ansible facts results) on items: 
  - Linux distribution: $..distro.first() to $..distribution.first() 
  - Linux distribution version: $..distro_ver.first() to $..distribution_version.first()
- Added Locked updates list item to Zabbix template.
- Added extension to file zbx_linux_security_compliance as .py. But still, can be executed directly if permission for execution are given.

1.1
Changes:
- Added new params to lock/hold and unlock/unhold packages.
  - Yum already filters those that are locked, but changed the apt when listing updates to remove those holded.
  - The list of apt packages are without the repository (ex: "packagename/repository 1.1.1 amd64").
  - Removed the javascript function in the zabbix preprocessor to remove the repository, and added to diplay the error when trying to list updates into the 'updates.pending.list' item.
- Improved errors handling Ansible/Python.
- Added an option to escalate privileges using Ansible (become).
- Case insensitive for param --sshcheck (True/true - False/false)

Notes: 
- When locking/unlocking a package fails, it would not proceed to update/upgrade. As a failsafe in case you do not want to upgrade a package.
- For Ansible yum-versionlock module, now requires to install the collection. Added it into README.

1.0
First release:
- Update repositories and the ability to do upgrade of packages.